{
  "name": "crocodoc-node",
  "version": "1.0.0",
  "description": "Crocodoc API, node.js client library",
  "keywords": [
    "crocodoc",
    "library",
    "client",
    "api"
  ],
  "license": "MIT",
  "author": {
    "name": "NetDev",
    "email": "dev@netdev.co.uk"
  },
  "contributors": [
    {
      "name": "Mike Bardzinski",
      "email": "mike.bardzinski@netdev.co.uk"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/NetDevLtd/crocodoc-node.git"
  },
  "private": false,
  "engines": {
    "node": ">=0.6.11"
  },
  "dependencies": {
    "underscore": "1.3.3",
    "soak": "0.3.0",
    "request": "2.11.4",
    "form-data": "0.0.4"
  },
  "devDependencies": {
    "jshint": "0.9.1",
    "mocha": "1.2.0"
  },
  "main": "./index.js",
  "scripts": {},
  "readme": "# crocodoc-node\n\nNode.js client library for Crocodoc API v2\n\nThis software is released under the MIT license. See `LICENSE.md` for more details.\n\n## Release Status\n\n* Latest: **1.0.0**\n\nRelease Notes, Issues & Roadmap: `RELEASE_NOTES.md`\n\n## Download and Installation\n\nFrom the command-line:\n\n    $ npm install crocodoc-node\n\npackage.json:\n\n    ...\n    dependencies: {\n      ...\n      \"crocodoc-node\": \"*$version*\",\n      ...\n    }\n    ...\n\n### For contributors\n\n  See *Contributing* section below\n\n## Example use\n\nThe examples below are not intended to replace a working knowledge of the [Crocodoc API](https://crocodoc.com/docs/api/),\nnor do they cover all possible uses and responses of the crocodoc-node client library.\n\nThey cover the main uses, assuming no errors.\n\nMore detailed descriptions of the client library behaviours, including errors, can be found in `test-results\\*.txt`.\nThese files were generated from the mocha test suite with the spec reporter.\n\n### DocumentAPI\n\n    var documentApi = new require('crocodoc-node').CrocodocAPI('API_TOKEN').documentAPI;\n\n#### Uploading a local file to Crocodoc\n\n    documentApi.uploadFile(pathToSupportedFile, function(error, response, body) {\n      console.log('error should be falsey: ', error);\n      console.log('response.statusCode should be 200: ', response.statusCode);\n      console.log('body.uuid should be a non-empty string: ', body.uuid);\n    });\n\n#### Uploading a URL to Crocodoc\n\n    documentApi.uploadUrl('http://web.crocodoc.com/files/test-simple.pdf', function(error, response, body) {\n      console.log('error should be falsey: ', error);\n      console.log('response.statusCode should be 200: ', response.statusCode);\n      console.log('body.uuid should be a non-empty string: ', body.uuid);\n    });\n\n#### Getting an uploaded document's status\n\nFor a single document:\n\n    documentApi.status(docUuid, function(error, response, body) {\n      console.log('error should be falsey: ', error);\n      console.log('response.statusCode should be 200: ', response.statusCode);\n      console.log('body should be an array containing a single status', body);\n    });\n\nOR for multiple documents:\n\n    documentApi.status([docUuid1, docUuid2, ...] , function(error, response, body) {\n      console.log('error should be falsey: ', error);\n      console.log('response.statusCode should be 200: ', response.statusCode);\n      console.log('body should be an array containing a single status', body);\n    });\n\n#### Deleting an uploaded document\n\n    documentApi.remove(docUuid, function(error, response, body) {\n      console.log('error should be falsey: ', error);\n      console.log('response.statusCode should be 200: ', response.statusCode);\n      console.log('body should be true', body);\n    });\n\n#### Poll for completion\n\nThis is additional to the Crocodoc API, and is provided as a helper.\n\n    documentApi.poll(docUuid, function(error, response, body) {\n      console.log('error should be falsey: ', error);\n      console.log('response.statusCode should be 200: ', response.statusCode);\n      console.log('body should be a single status', body);\n    });\n\nThe callback will not be invoked until the document has finished converting (or the conversion has failed).\nThe body contains the retrieved document status indicating conversion completion or failure.\n\n### SessionAPI\n\n    var sessionApi = new require('crocodoc-node').CrocodocAPI('API_TOKEN').sessionAPI;\n\n#### Creating a new session\n\nWith supplied [session options](https://crocodoc.com/docs/api/#session-create):\n\n    sessionApi.create(docUuid, {editable:false, downloadable: true}, function(error, response, body) {\n      console.log('error should be falsey: ', error);\n      console.log('response.statusCode should be 200: ', response.statusCode);\n      console.log('body.session should be a non-empty string', body.session);\n    });\n\nWith default session options:\n\n    sessionApi.create(docUuid, function(error, response, body) {\n      console.log('error should be falsey: ', error);\n      console.log('response.statusCode should be 200: ', response.statusCode);\n      console.log('body.session should be a non-empty string', body.session);\n    });\n\n### DownloadAPI\n\n    var fs = require('fs');\n    var downloadApi = new require('crocodoc-node').CrocodocAPI('API_TOKEN').downloadAPI;\n\n#### Downloading the original document\n\n    downloadApi.document(docUuid, fs.createWriteStream('filePath.orig'), function(error, response, body) {\n      console.log('error should be falsey: ', error);\n      console.log('response.statusCode should be 200: ', response.statusCode);\n      console.log('body.uuid should be a non-empty string', body.uuid);\n    });\n\n#### Downloading the document as a PDF\n\n    downloadApi.document(docUuid, {pdf: true}, fs.createWriteStream('filePath.pdf'), function(error, response, body) {\n      console.log('error should be falsey: ', error);\n      console.log('response.statusCode should be 200: ', response.statusCode);\n      console.log('body.uuid should be a non-empty string', body.uuid);\n    });\n\n#### Downloading the document's thumbnail\n\n    downloadApi.thumbnail(docUuid, '150x150', fs.createWriteStream('filePath.png'), function(error, response, body) {\n      console.log('error should be falsey: ', error);\n      console.log('response.statusCode should be 200: ', response.statusCode);\n      console.log('body.uuid should be a non-empty string', body.uuid);\n    });\n\n#### Downloading the extracted text for a document\n\n    downloadApi.text(docUuid,  fs.createWriteStream('filePath.txt'), function(error, response, body) {\n      console.log('error should be falsey: ', error);\n      console.log('response.statusCode should be 200: ', response.statusCode);\n      console.log('body.uuid should be a non-empty string', body.uuid);\n    });\n\n## Bug reports\n\nhttps://github.com/NetDevLtd/crocodoc-node/issues\n\n## Contributing\n\nFork from: https://github.com/NetDevLtd/crocodoc-node\n\nAll contributions and constructive suggestions are welcome.\n\n### Set-up\n\nOnce you've cloned your fork to a local repo, to install all the dependencies, run:\n\n    $ make install\n\nYou can then run `make lint` and `make test`, to de-lint and run the tests, respectively.\n\nIn order to run the tests, you will need to configure the test framework with your Crocodoc API token:\n\nedit `test/framework/crocodoc-details.js`, and change `DUMMY-TOKEN` to your API token.\n\nIf you don't do this, many of the tests will fail!\n\nTo make git stop tracking changes to this file, so that your sensitive API token doesn't get accidentally committed:\n\n    $ git update-index --assume-unchanged test/framework/crocodoc-details.js\n\nYou can still explicitly `git add` it, or if you want to turn tracking on again:\n\n    $ git update-index --no-assume-unchanged test/framework/crocodoc-details.js\n\nThese instructions are duplicated in the file.\n\n### Pull requests\n\nPlease ensure that Pull Requests:\n\n* are lint-free: `make lint`, with an unmodified `jshint.json`\n* include new / modified mocha tests: these should be in `test/spec`\n* pass all tests: `make test` reports no errors.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/NetDevLtd/crocodoc-node/issues"
  },
  "homepage": "https://github.com/NetDevLtd/crocodoc-node",
  "_id": "crocodoc-node@1.0.0",
  "_from": "crocodoc-node@latest"
}
